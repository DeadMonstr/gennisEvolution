import React, {useCallback, useEffect, useState} from 'react';


import cls from "./schoolTeacherStudents.module.sass"
import Search from "components/platform/platformUI/search";
import Table from "components/platform/platformUI/table";
import Modal from "components/platform/platformUI/modal";
import Input from "components/platform/platformUI/input";
import Textarea from "components/platform/platformUI/textarea";
import Select from "components/platform/platformUI/select";
import {useDispatch, useSelector} from "react-redux";
import {fetchDataToChange} from "slices/dataToChangeSlice";
import classNames from "classnames";
import {useForm} from "react-hook-form";
import InputForm from "components/platform/platformUI/inputForm";
import Form from "components/platform/platformUI/form/Form";
import Button from "components/platform/platformUI/button";
import {useHttp} from "hooks/http.hook";
import {BackUrl, headers} from "constants/global";
import {setMessage} from "slices/messageSlice";
import {addSchoolTeacher, changeSchoolTeacher, deleteSchoolTeacher} from "slices/schoolProfileSlice";
import {addStudent, changeStudent, deleteStudent} from "slices/schoolTeacherProfileSlice";
import {useParams} from "react-router-dom";
import Confirm from "components/platform/platformModals/confirm/confirm";


const SchoolTeacherStudents = () => {

    const [search, setSearch] = useState()
    const [activeAdd, setActiveAdd] = useState(false)
    const [activeChange, setActiveChange] = useState(false)

    const [changingData, setChangingData] = useState({})
    const [activeDelete, setActiveDelete] = useState(false)


    const {students} = useSelector(state => state.schoolTeacherProfile)


    const onClickActive = () => {
        setActiveAdd(true)
    }

    const onClickChange = (data) => {
        setActiveChange(true)
        setChangingData(data)
    }

    const onClickDelete = (id) => {
        setActiveDelete(true)
        setChangingData({id})
    }


    const {request} = useHttp()
    const dispatch = useDispatch()

    const onDelete = (data) => {
        if (data === "yes") {
            request(`${BackUrl}crud_student_school/${changingData.id}`,"DELETE", null, headers())
                .then(res => {
                    dispatch(deleteStudent(changingData.id))
                    setActiveDelete(false)
                })
        }
    }



    return (
        <div className={cls.students}>
            <div className={cls.header}>
                <Search search={search} setSearch={setSearch}/>
                <div className={cls.add} onClick={onClickActive}>
                    <i className="fas fa-plus"></i>
                </div>
            </div>


            <div className={cls.container}>
                <Table>
                    <thead>
                    <tr>
                        <th>â„–</th>
                        <th>Ism</th>
                        <th>Familya</th>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    {
                        students?.map((item, i) => (
                            <tr> 
                                <td>{i + 1}</td>
                                <td>{item.surname}</td>
                                <td>{item.name}</td>
                                <td className={cls.change}>
                                    <i className="fas fa-pen" onClick={() => onClickChange(item)}></i>
                                </td>
                                <td className={cls.delete}>

                                    <i className="fas fa-trash" onClick={() => onClickDelete(item.id)}></i>

                                </td>
                            </tr>
                        ))
                    }
                    </tbody>
                </Table>
            </div>


            <Modal activeModal={activeAdd} setActiveModal={() => setActiveAdd(false)}>
                <AddModal setActive={setActiveAdd}/>
            </Modal>


            <Modal activeModal={activeChange} setActiveModal={() => setActiveChange(false)}>
                <AddModal info={changingData} setActive={setActiveChange}/>
            </Modal>


            <Modal activeModal={activeDelete} setActiveModal={() => setActiveDelete()}>
                <Confirm getConfirm={onDelete} text={"O'quvchini o'chirishni hohlaysizmi"} setActive={setActiveDelete}/>
            </Modal>
        </div>
    );
};


const AddModal = ({info,setActive}) => {


    const {id: teacherId} = useParams()

    const [name, setName] = useState("")
    const [surname, setSurname] = useState("")
    const [phone, setPhone] = useState("")


    const [isChange, setIsChange] = useState(false)


    useEffect(() => {
        if (info) {
            setName(info.name)
            setSurname(info.surname)
            setPhone(info.phone)
            setIsChange(true)
        }
    }, [info])

    const {request} = useHttp()


    const dispatch = useDispatch()


    const onSubmit = useCallback((e) => {

        e.preventDefault()
        console.log("hello")


        const data = {
            name,
            surname,
            phone,
            teacher_id: teacherId
        }



        if (isChange) {
            request(`${BackUrl}crud_student_school/${info.id}`, "PUT", JSON.stringify(data), headers())
                .then(res => {
                    dispatch(setMessage({
                        msg: "O'quvchi muvaffaqiyatli o'zgartirildi",
                        type: "success",
                        active: true
                    }))
                    dispatch(changeStudent(res.user))
                })
        } else {
            request(`${BackUrl}crud_student_school/`, "POST", JSON.stringify(data), headers())
                .then(res => {
                    dispatch(setMessage({
                        msg: "O'quvchi muvaffaqiyatli yaratildi",
                        type: "success",
                        active: true
                    }))
                    dispatch(addStudent(res.user))
                })
        }
        setActive(false)
    },[name,surname,phone,teacherId,isChange])




    return (
        <div className={cls.addModal}>
            <h1>{isChange ? "O'quvchini ma'lumotlarini o'zgartirish" : "O'quvchini qo'shish"}</h1>
            <Form id={"formBtn"} typeSubmit={"handle"} extraClassname={cls.wrapper}>

                <Input
                    required
                    title={"Ism"}
                    name={"name"}
                    type={"text"}
                    value={name}
                    onChange={setName}
                />
                <Input
                    required
                    title={"Familya"}
                    name={"surname"}
                    type={"text"}
                    value={surname}
                    onChange={setSurname}
                />
                <Input
                    required
                    title={"Tel"}
                    name={"phone"}
                    type={"text"}
                    value={phone}
                    onChange={setPhone}
                />
            </Form>
            <Button
                onClickBtn={onSubmit}
                formId={"formBtn"}
                type={"submit"}
            >
                Qo'shish
            </Button>


        </div>
    )
}

export default SchoolTeacherStudents;